{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.neural_network import MLPRegressor\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.metrics import r2_score\n",
    "from scipy.signal import savgol_filter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "module_path = os.path.abspath(os.path.join('..'))\n",
    "if module_path not in sys.path:\n",
    "    sys.path.append(module_path)\n",
    "from PredictXANES import xanes_derivatives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data import of 10,000 calculated average XANES spectra along with averaged coordination numbers, number of Cu atoms within 3 angstroms, and number of Te atoms within 3 angstroms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('mu_cn10000.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CN</th>\n",
       "      <th>Num Cu</th>\n",
       "      <th>Num Te</th>\n",
       "      <th>Mu1</th>\n",
       "      <th>Mu2</th>\n",
       "      <th>Mu3</th>\n",
       "      <th>Mu4</th>\n",
       "      <th>Mu5</th>\n",
       "      <th>Mu6</th>\n",
       "      <th>Mu7</th>\n",
       "      <th>...</th>\n",
       "      <th>Mu91</th>\n",
       "      <th>Mu92</th>\n",
       "      <th>Mu93</th>\n",
       "      <th>Mu94</th>\n",
       "      <th>Mu95</th>\n",
       "      <th>Mu96</th>\n",
       "      <th>Mu97</th>\n",
       "      <th>Mu98</th>\n",
       "      <th>Mu99</th>\n",
       "      <th>Mu100</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>9.920706</td>\n",
       "      <td>5.641016</td>\n",
       "      <td>4.279690</td>\n",
       "      <td>0.030303</td>\n",
       "      <td>0.032757</td>\n",
       "      <td>0.035112</td>\n",
       "      <td>0.037475</td>\n",
       "      <td>0.039958</td>\n",
       "      <td>0.042668</td>\n",
       "      <td>0.045714</td>\n",
       "      <td>...</td>\n",
       "      <td>0.994119</td>\n",
       "      <td>0.995957</td>\n",
       "      <td>0.998090</td>\n",
       "      <td>1.000540</td>\n",
       "      <td>1.003327</td>\n",
       "      <td>1.006472</td>\n",
       "      <td>1.009996</td>\n",
       "      <td>1.013918</td>\n",
       "      <td>1.018260</td>\n",
       "      <td>1.023043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>9.038954</td>\n",
       "      <td>4.685766</td>\n",
       "      <td>4.353189</td>\n",
       "      <td>0.031529</td>\n",
       "      <td>0.034154</td>\n",
       "      <td>0.036671</td>\n",
       "      <td>0.039203</td>\n",
       "      <td>0.041875</td>\n",
       "      <td>0.044810</td>\n",
       "      <td>0.048132</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999269</td>\n",
       "      <td>1.000942</td>\n",
       "      <td>1.002782</td>\n",
       "      <td>1.004773</td>\n",
       "      <td>1.006900</td>\n",
       "      <td>1.009148</td>\n",
       "      <td>1.011502</td>\n",
       "      <td>1.013947</td>\n",
       "      <td>1.016467</td>\n",
       "      <td>1.019047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>9.725820</td>\n",
       "      <td>5.599930</td>\n",
       "      <td>4.125890</td>\n",
       "      <td>0.030576</td>\n",
       "      <td>0.033095</td>\n",
       "      <td>0.035505</td>\n",
       "      <td>0.037921</td>\n",
       "      <td>0.040456</td>\n",
       "      <td>0.043223</td>\n",
       "      <td>0.046335</td>\n",
       "      <td>...</td>\n",
       "      <td>0.994823</td>\n",
       "      <td>0.997591</td>\n",
       "      <td>1.000637</td>\n",
       "      <td>1.003974</td>\n",
       "      <td>1.007616</td>\n",
       "      <td>1.011577</td>\n",
       "      <td>1.015872</td>\n",
       "      <td>1.020514</td>\n",
       "      <td>1.025518</td>\n",
       "      <td>1.030897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>9.374672</td>\n",
       "      <td>5.139779</td>\n",
       "      <td>4.234893</td>\n",
       "      <td>0.030891</td>\n",
       "      <td>0.033427</td>\n",
       "      <td>0.035861</td>\n",
       "      <td>0.038308</td>\n",
       "      <td>0.040883</td>\n",
       "      <td>0.043703</td>\n",
       "      <td>0.046883</td>\n",
       "      <td>...</td>\n",
       "      <td>0.999852</td>\n",
       "      <td>1.002114</td>\n",
       "      <td>1.004576</td>\n",
       "      <td>1.007246</td>\n",
       "      <td>1.010132</td>\n",
       "      <td>1.013241</td>\n",
       "      <td>1.016581</td>\n",
       "      <td>1.020158</td>\n",
       "      <td>1.023981</td>\n",
       "      <td>1.028057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>9.599938</td>\n",
       "      <td>5.271755</td>\n",
       "      <td>4.328182</td>\n",
       "      <td>0.031077</td>\n",
       "      <td>0.033681</td>\n",
       "      <td>0.036170</td>\n",
       "      <td>0.038665</td>\n",
       "      <td>0.041287</td>\n",
       "      <td>0.044156</td>\n",
       "      <td>0.047393</td>\n",
       "      <td>...</td>\n",
       "      <td>0.998475</td>\n",
       "      <td>1.000035</td>\n",
       "      <td>1.001807</td>\n",
       "      <td>1.003776</td>\n",
       "      <td>1.005926</td>\n",
       "      <td>1.008242</td>\n",
       "      <td>1.010709</td>\n",
       "      <td>1.013311</td>\n",
       "      <td>1.016034</td>\n",
       "      <td>1.018861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9995</td>\n",
       "      <td>9.360022</td>\n",
       "      <td>5.084340</td>\n",
       "      <td>4.275681</td>\n",
       "      <td>0.030950</td>\n",
       "      <td>0.033483</td>\n",
       "      <td>0.035915</td>\n",
       "      <td>0.038363</td>\n",
       "      <td>0.040943</td>\n",
       "      <td>0.043770</td>\n",
       "      <td>0.046960</td>\n",
       "      <td>...</td>\n",
       "      <td>1.001789</td>\n",
       "      <td>1.003715</td>\n",
       "      <td>1.005820</td>\n",
       "      <td>1.008111</td>\n",
       "      <td>1.010590</td>\n",
       "      <td>1.013262</td>\n",
       "      <td>1.016131</td>\n",
       "      <td>1.019201</td>\n",
       "      <td>1.022478</td>\n",
       "      <td>1.025964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9996</td>\n",
       "      <td>9.758551</td>\n",
       "      <td>5.435938</td>\n",
       "      <td>4.322612</td>\n",
       "      <td>0.030927</td>\n",
       "      <td>0.033519</td>\n",
       "      <td>0.035994</td>\n",
       "      <td>0.038473</td>\n",
       "      <td>0.041074</td>\n",
       "      <td>0.043918</td>\n",
       "      <td>0.047124</td>\n",
       "      <td>...</td>\n",
       "      <td>1.000563</td>\n",
       "      <td>1.002288</td>\n",
       "      <td>1.004220</td>\n",
       "      <td>1.006344</td>\n",
       "      <td>1.008645</td>\n",
       "      <td>1.011110</td>\n",
       "      <td>1.013723</td>\n",
       "      <td>1.016471</td>\n",
       "      <td>1.019338</td>\n",
       "      <td>1.022312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9997</td>\n",
       "      <td>10.181228</td>\n",
       "      <td>6.181228</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>0.030587</td>\n",
       "      <td>0.033143</td>\n",
       "      <td>0.035582</td>\n",
       "      <td>0.038020</td>\n",
       "      <td>0.040572</td>\n",
       "      <td>0.043356</td>\n",
       "      <td>0.046485</td>\n",
       "      <td>...</td>\n",
       "      <td>0.992527</td>\n",
       "      <td>0.996200</td>\n",
       "      <td>1.000256</td>\n",
       "      <td>1.004671</td>\n",
       "      <td>1.009423</td>\n",
       "      <td>1.014490</td>\n",
       "      <td>1.019850</td>\n",
       "      <td>1.025479</td>\n",
       "      <td>1.031355</td>\n",
       "      <td>1.037456</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9998</td>\n",
       "      <td>10.156260</td>\n",
       "      <td>6.020380</td>\n",
       "      <td>4.135880</td>\n",
       "      <td>0.030699</td>\n",
       "      <td>0.033247</td>\n",
       "      <td>0.035682</td>\n",
       "      <td>0.038120</td>\n",
       "      <td>0.040676</td>\n",
       "      <td>0.043465</td>\n",
       "      <td>0.046604</td>\n",
       "      <td>...</td>\n",
       "      <td>0.994741</td>\n",
       "      <td>0.997739</td>\n",
       "      <td>1.001036</td>\n",
       "      <td>1.004613</td>\n",
       "      <td>1.008451</td>\n",
       "      <td>1.012532</td>\n",
       "      <td>1.016838</td>\n",
       "      <td>1.021350</td>\n",
       "      <td>1.026048</td>\n",
       "      <td>1.030916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9999</td>\n",
       "      <td>9.684431</td>\n",
       "      <td>5.368862</td>\n",
       "      <td>4.315569</td>\n",
       "      <td>0.030927</td>\n",
       "      <td>0.033503</td>\n",
       "      <td>0.035965</td>\n",
       "      <td>0.038432</td>\n",
       "      <td>0.041022</td>\n",
       "      <td>0.043855</td>\n",
       "      <td>0.047050</td>\n",
       "      <td>...</td>\n",
       "      <td>0.995139</td>\n",
       "      <td>0.996878</td>\n",
       "      <td>0.998857</td>\n",
       "      <td>1.001069</td>\n",
       "      <td>1.003506</td>\n",
       "      <td>1.006159</td>\n",
       "      <td>1.009022</td>\n",
       "      <td>1.012084</td>\n",
       "      <td>1.015339</td>\n",
       "      <td>1.018778</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10000 rows × 103 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             CN    Num Cu    Num Te       Mu1       Mu2       Mu3       Mu4  \\\n",
       "0      9.920706  5.641016  4.279690  0.030303  0.032757  0.035112  0.037475   \n",
       "1      9.038954  4.685766  4.353189  0.031529  0.034154  0.036671  0.039203   \n",
       "2      9.725820  5.599930  4.125890  0.030576  0.033095  0.035505  0.037921   \n",
       "3      9.374672  5.139779  4.234893  0.030891  0.033427  0.035861  0.038308   \n",
       "4      9.599938  5.271755  4.328182  0.031077  0.033681  0.036170  0.038665   \n",
       "...         ...       ...       ...       ...       ...       ...       ...   \n",
       "9995   9.360022  5.084340  4.275681  0.030950  0.033483  0.035915  0.038363   \n",
       "9996   9.758551  5.435938  4.322612  0.030927  0.033519  0.035994  0.038473   \n",
       "9997  10.181228  6.181228  4.000000  0.030587  0.033143  0.035582  0.038020   \n",
       "9998  10.156260  6.020380  4.135880  0.030699  0.033247  0.035682  0.038120   \n",
       "9999   9.684431  5.368862  4.315569  0.030927  0.033503  0.035965  0.038432   \n",
       "\n",
       "           Mu5       Mu6       Mu7  ...      Mu91      Mu92      Mu93  \\\n",
       "0     0.039958  0.042668  0.045714  ...  0.994119  0.995957  0.998090   \n",
       "1     0.041875  0.044810  0.048132  ...  0.999269  1.000942  1.002782   \n",
       "2     0.040456  0.043223  0.046335  ...  0.994823  0.997591  1.000637   \n",
       "3     0.040883  0.043703  0.046883  ...  0.999852  1.002114  1.004576   \n",
       "4     0.041287  0.044156  0.047393  ...  0.998475  1.000035  1.001807   \n",
       "...        ...       ...       ...  ...       ...       ...       ...   \n",
       "9995  0.040943  0.043770  0.046960  ...  1.001789  1.003715  1.005820   \n",
       "9996  0.041074  0.043918  0.047124  ...  1.000563  1.002288  1.004220   \n",
       "9997  0.040572  0.043356  0.046485  ...  0.992527  0.996200  1.000256   \n",
       "9998  0.040676  0.043465  0.046604  ...  0.994741  0.997739  1.001036   \n",
       "9999  0.041022  0.043855  0.047050  ...  0.995139  0.996878  0.998857   \n",
       "\n",
       "          Mu94      Mu95      Mu96      Mu97      Mu98      Mu99     Mu100  \n",
       "0     1.000540  1.003327  1.006472  1.009996  1.013918  1.018260  1.023043  \n",
       "1     1.004773  1.006900  1.009148  1.011502  1.013947  1.016467  1.019047  \n",
       "2     1.003974  1.007616  1.011577  1.015872  1.020514  1.025518  1.030897  \n",
       "3     1.007246  1.010132  1.013241  1.016581  1.020158  1.023981  1.028057  \n",
       "4     1.003776  1.005926  1.008242  1.010709  1.013311  1.016034  1.018861  \n",
       "...        ...       ...       ...       ...       ...       ...       ...  \n",
       "9995  1.008111  1.010590  1.013262  1.016131  1.019201  1.022478  1.025964  \n",
       "9996  1.006344  1.008645  1.011110  1.013723  1.016471  1.019338  1.022312  \n",
       "9997  1.004671  1.009423  1.014490  1.019850  1.025479  1.031355  1.037456  \n",
       "9998  1.004613  1.008451  1.012532  1.016838  1.021350  1.026048  1.030916  \n",
       "9999  1.001069  1.003506  1.006159  1.009022  1.012084  1.015339  1.018778  \n",
       "\n",
       "[10000 rows x 103 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Spectra Only:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Neural network is trained on averaged spectra only. The spectra are split into a training set and testing set with a ratio of 4:1. The predicted features are the coordination number, number of Cu atoms, and number of Te atoms."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.drop(labels=['CN', 'Num Cu', 'Num Te'], axis=1)\n",
    "list = X.columns.tolist()\n",
    "\n",
    "X.columns = range(X.shape[1])\n",
    "\n",
    "\n",
    "noise = np.random.normal(0,0.01,[10000,100])\n",
    "X_noise = X + noise\n",
    "X_noise.columns = list\n",
    "\n",
    "for index, row in X_noise.iterrows():\n",
    "    savgol_filter(row, 11, 3)\n",
    "\n",
    "for index, row in X_noise.iterrows():\n",
    "    savgol_filter(row, 5, 2)    \n",
    "    \n",
    "y = df[['CN', 'Num Cu', 'Num Te']]\n",
    "X_train, X_test, y_train, y_test = train_test_split(X_noise, y, test_size=0.20, random_state=519)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "One layer is added, and the depth of the that layer is optimized by looking at the loss from a range of 1 to 100, the maximum number of features being trained on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/anaconda3/lib/python3.7/site-packages/sklearn/neural_network/multilayer_perceptron.py:566: ConvergenceWarning: Stochastic Optimizer: Maximum iterations (500) reached and the optimization hasn't converged yet.\n",
      "  % self.max_iter, ConvergenceWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           0\n",
      "0   0.098830\n",
      "1   0.098119\n",
      "2   0.042116\n",
      "3   0.100435\n",
      "4   0.103221\n",
      "5   0.035903\n",
      "6   0.099686\n",
      "7   0.036824\n",
      "8   0.038345\n",
      "9   0.028501\n",
      "10  0.039333\n",
      "11  0.040296\n",
      "12  0.034879\n",
      "13  0.039395\n",
      "14  0.039967\n",
      "15  0.040259\n",
      "16  0.031271\n",
      "17  0.043052\n",
      "18  0.037890\n",
      "19  0.039684\n",
      "20  0.041126\n",
      "21  0.027965\n",
      "22  0.033563\n",
      "23  0.041964\n",
      "24  0.036041\n",
      "25  0.027079\n",
      "26  0.040226\n",
      "27  0.037866\n",
      "28  0.039075\n",
      "29  0.025766\n",
      "30  0.027977\n",
      "31  0.026347\n",
      "32  0.036269\n",
      "33  0.030603\n",
      "34  0.039940\n",
      "35  0.037316\n",
      "36  0.040226\n",
      "37  0.041710\n",
      "38  0.026138\n",
      "39  0.041378\n",
      "40  0.043467\n",
      "41  0.033308\n",
      "42  0.031917\n",
      "43  0.037244\n",
      "44  0.034977\n",
      "45  0.028085\n",
      "46  0.038676\n",
      "47  0.030672\n",
      "48  0.028160\n",
      "49  0.024760\n",
      "50  0.036471\n",
      "51  0.029630\n",
      "52  0.036257\n",
      "53  0.041897\n",
      "54  0.029379\n",
      "55  0.037139\n",
      "56  0.041433\n",
      "57  0.034799\n",
      "58  0.044826\n",
      "59  0.026155\n",
      "60  0.036450\n",
      "61  0.036402\n",
      "62  0.039241\n",
      "63  0.034732\n",
      "64  0.035388\n",
      "65  0.037011\n",
      "66  0.035789\n",
      "67  0.038571\n",
      "68  0.039738\n",
      "69  0.027867\n",
      "70  0.034666\n",
      "71  0.026930\n",
      "72  0.029606\n",
      "73  0.031845\n",
      "74  0.031887\n",
      "75  0.037258\n",
      "76  0.042319\n",
      "77  0.040255\n",
      "78  0.035056\n",
      "79  0.043334\n",
      "80  0.040848\n",
      "81  0.035192\n",
      "82  0.035955\n",
      "83  0.037272\n",
      "84  0.036800\n",
      "85  0.026503\n",
      "86  0.030068\n",
      "87  0.030813\n",
      "88  0.033613\n",
      "89  0.031273\n",
      "90  0.027240\n",
      "91  0.029533\n",
      "92  0.042249\n",
      "93  0.035935\n",
      "94  0.036377\n",
      "95  0.036381\n",
      "96  0.034466\n",
      "97  0.035189\n",
      "98  0.029669\n"
     ]
    }
   ],
   "source": [
    "loss = []\n",
    "for i in range(100):\n",
    "    if i == 0:\n",
    "        pass\n",
    "    else:\n",
    "        nn = MLPRegressor(hidden_layer_sizes=(i), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "        nn = nn.fit(X_train, y_train)\n",
    "        loss.append(nn.loss_)\n",
    "\n",
    "lossdf = pd.DataFrame(loss)\n",
    "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "    print(lossdf)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50\n",
      "0.024760378294600847\n"
     ]
    }
   ],
   "source": [
    "min_loss = lossdf.idxmin()[0]+1\n",
    "print(min_loss)\n",
    "nn = MLPRegressor(hidden_layer_sizes=(min_loss), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "nn = nn.fit(X_train, y_train)\n",
    "loss = nn.loss_\n",
    "print(loss)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training mse =  [0.06993373412158937, 0.07141246599340027, 0.002058589165223495]\n",
      "testing mse = [0.07411797126473472, 0.07141246599340027, 0.002058589165223495]\n",
      "training R2 = [0.6289868857784666, 0.7852549605087016, 0.9598765605695949]\n",
      "testing R2 = [0.6364083906626792, 0.7833643282754081, 0.963176847964053]\n"
     ]
    }
   ],
   "source": [
    "y_train_pred = nn.predict(X_train)\n",
    "y_test_pred = nn.predict(X_test)\n",
    "train_score_CN = r2_score(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_score_Cu = r2_score(y_train.iloc[:,1], y_train_pred[:,1]) \n",
    "train_score_Te = r2_score(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_score_CN = r2_score(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_score_Cu = r2_score(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_score_Te = r2_score(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "train_mse_CN = mean_squared_error(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_mse_Cu = mean_squared_error(y_train.iloc[:,1], y_train_pred[:,1])\n",
    "train_mse_Te = mean_squared_error(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_mse_CN = mean_squared_error(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_mse_Cu = mean_squared_error(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_mse_Te = mean_squared_error(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "\n",
    "train_score_list = [train_score_CN, train_score_Cu, train_score_Te]\n",
    "train_mse_list = [train_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_mse_list = [test_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_score_list = [test_score_CN, test_score_Cu, test_score_Te]\n",
    "print('training mse =  '+ str(train_mse_list))\n",
    "print('testing mse = ' + str(test_mse_list))\n",
    "print('training R2 = ' + str(train_score_list))\n",
    "print('testing R2 = ' + str(test_score_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.93479262672811, 5.065207373271892, 3.8025699892467064, 5.150263817739536)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.linspace(8, 12, 50)\n",
    "x2 = np.linspace(4, 8, 50)\n",
    "x3 = np.linspace(4, 5, 50)\n",
    "\n",
    "plt.figure(figsize=[14,4])\n",
    "plt.subplots_adjust(wspace=0.3)\n",
    "ax1 = plt.subplot(1,3,1)\n",
    "ax1.scatter(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "ax1.plot(x1, x1, color='red')\n",
    "ax1.set_xlabel('True CN')\n",
    "ax1.set_ylabel('Pred CN')\n",
    "ax1.set_title('Test CN')\n",
    "plt.axis('equal')\n",
    "\n",
    "ax2 = plt.subplot(1,3,2)\n",
    "ax2.scatter(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "ax2.plot(x2, x2, color='red')\n",
    "ax2.set_xlabel('True Cu Num')\n",
    "ax2.set_ylabel('Pred Cu Num')\n",
    "ax2.set_title('Test Cu Num')\n",
    "plt.axis('equal')\n",
    "\n",
    "\n",
    "ax3 = plt.subplot(1,3,3)\n",
    "ax3.scatter(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "ax3.plot(x3, x3, color='red')\n",
    "ax3.set_xlabel('True Te Num')\n",
    "ax3.set_ylabel('Pred Te Num')\n",
    "ax3.set_title('Test Te Num')\n",
    "plt.axis('equal')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Repeated for training with both the first and second derivative."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "d1, d2 = xanes_derivatives.xanes_derivatives(X_noise)\n",
    "df1 = pd.DataFrame(d1)\n",
    "df2 = pd.DataFrame(d2)\n",
    "df3 = pd.concat([df1, df2], axis=1)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(df3, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            0\n",
      "0    0.035819\n",
      "1    0.029299\n",
      "2    0.026702\n",
      "3    0.026882\n",
      "4    0.027594\n",
      "5    0.026601\n",
      "6    0.026332\n",
      "7    0.027001\n",
      "8    0.027705\n",
      "9    0.027111\n",
      "10   0.025283\n",
      "11   0.026420\n",
      "12   0.027716\n",
      "13   0.025590\n",
      "14   0.026490\n",
      "15   0.026212\n",
      "16   0.026637\n",
      "17   0.027367\n",
      "18   0.026121\n",
      "19   0.025688\n",
      "20   0.026572\n",
      "21   0.026745\n",
      "22   0.025862\n",
      "23   0.025435\n",
      "24   0.025897\n",
      "25   0.025594\n",
      "26   0.025832\n",
      "27   0.025565\n",
      "28   0.025926\n",
      "29   0.026150\n",
      "30   0.025979\n",
      "31   0.025534\n",
      "32   0.024822\n",
      "33   0.025644\n",
      "34   0.026200\n",
      "35   0.025555\n",
      "36   0.025127\n",
      "37   0.026178\n",
      "38   0.025344\n",
      "39   0.025256\n",
      "40   0.025471\n",
      "41   0.025830\n",
      "42   0.024251\n",
      "43   0.025156\n",
      "44   0.025428\n",
      "45   0.024577\n",
      "46   0.026377\n",
      "47   0.025973\n",
      "48   0.024777\n",
      "49   0.025857\n",
      "50   0.024629\n",
      "51   0.025305\n",
      "52   0.024548\n",
      "53   0.025105\n",
      "54   0.024873\n",
      "55   0.025552\n",
      "56   0.025538\n",
      "57   0.025486\n",
      "58   0.025833\n",
      "59   0.024691\n",
      "60   0.025176\n",
      "61   0.025158\n",
      "62   0.025354\n",
      "63   0.025596\n",
      "64   0.025201\n",
      "65   0.025245\n",
      "66   0.026149\n",
      "67   0.025394\n",
      "68   0.025327\n",
      "69   0.024692\n",
      "70   0.025130\n",
      "71   0.024949\n",
      "72   0.025312\n",
      "73   0.025070\n",
      "74   0.024485\n",
      "75   0.025395\n",
      "76   0.024973\n",
      "77   0.024959\n",
      "78   0.024548\n",
      "79   0.024795\n",
      "80   0.025523\n",
      "81   0.024598\n",
      "82   0.024921\n",
      "83   0.024907\n",
      "84   0.024703\n",
      "85   0.025449\n",
      "86   0.025585\n",
      "87   0.025111\n",
      "88   0.024827\n",
      "89   0.025276\n",
      "90   0.024161\n",
      "91   0.024896\n",
      "92   0.025149\n",
      "93   0.024642\n",
      "94   0.024685\n",
      "95   0.025232\n",
      "96   0.025859\n",
      "97   0.025487\n",
      "98   0.025139\n",
      "99   0.024935\n",
      "100  0.024850\n",
      "101  0.024491\n",
      "102  0.025088\n",
      "103  0.025196\n",
      "104  0.025181\n",
      "105  0.024615\n",
      "106  0.025241\n",
      "107  0.024967\n",
      "108  0.025258\n",
      "109  0.024777\n",
      "110  0.026035\n",
      "111  0.024385\n",
      "112  0.024774\n",
      "113  0.026124\n",
      "114  0.024308\n",
      "115  0.024664\n",
      "116  0.024735\n",
      "117  0.025505\n",
      "118  0.024530\n",
      "119  0.025232\n",
      "120  0.026016\n",
      "121  0.025171\n",
      "122  0.025473\n",
      "123  0.024888\n",
      "124  0.025733\n",
      "125  0.025127\n",
      "126  0.024296\n",
      "127  0.024913\n",
      "128  0.024446\n",
      "129  0.026235\n",
      "130  0.025016\n",
      "131  0.024524\n",
      "132  0.025112\n",
      "133  0.023809\n",
      "134  0.024591\n",
      "135  0.024788\n",
      "136  0.024365\n",
      "137  0.024013\n",
      "138  0.025464\n",
      "139  0.024668\n",
      "140  0.025320\n",
      "141  0.024708\n",
      "142  0.023946\n",
      "143  0.024810\n",
      "144  0.024709\n",
      "145  0.024353\n",
      "146  0.025009\n",
      "147  0.024897\n",
      "148  0.024989\n",
      "149  0.025182\n",
      "150  0.024353\n",
      "151  0.024920\n",
      "152  0.024834\n",
      "153  0.025779\n",
      "154  0.025549\n",
      "155  0.026299\n",
      "156  0.024461\n",
      "157  0.024779\n",
      "158  0.024714\n",
      "159  0.024506\n",
      "160  0.024771\n",
      "161  0.024311\n",
      "162  0.024102\n",
      "163  0.024175\n",
      "164  0.024712\n",
      "165  0.024887\n",
      "166  0.025303\n",
      "167  0.024859\n",
      "168  0.024092\n",
      "169  0.024778\n",
      "170  0.025222\n",
      "171  0.023783\n",
      "172  0.024811\n",
      "173  0.024635\n",
      "174  0.024767\n",
      "175  0.024782\n",
      "176  0.024577\n",
      "177  0.024917\n",
      "178  0.024603\n",
      "179  0.025160\n",
      "180  0.024785\n",
      "181  0.025625\n",
      "182  0.024914\n",
      "183  0.024506\n",
      "184  0.025359\n",
      "185  0.024719\n",
      "186  0.024868\n",
      "187  0.024965\n",
      "188  0.024444\n",
      "189  0.024774\n",
      "190  0.024486\n",
      "191  0.024818\n",
      "192  0.024959\n",
      "193  0.025296\n",
      "194  0.024596\n",
      "195  0.023916\n",
      "196  0.025416\n",
      "197  0.024681\n",
      "198  0.024519\n"
     ]
    }
   ],
   "source": [
    "loss = []\n",
    "for i in range(200):\n",
    "    if i == 0:\n",
    "        pass\n",
    "    else:\n",
    "        nn = MLPRegressor(hidden_layer_sizes=(i), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "        nn = nn.fit(X_train, y_train)\n",
    "        loss.append(nn.loss_)\n",
    "\n",
    "lossdf10 = pd.DataFrame(loss)\n",
    "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "    print(lossdf10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "172\n",
      "0.023783029062227286\n"
     ]
    }
   ],
   "source": [
    "min_loss10 = lossdf10.idxmin()[0]+1\n",
    "print(min_loss10)\n",
    "nn = MLPRegressor(hidden_layer_sizes=(min_loss10), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "nn = nn.fit(X_train, y_train)\n",
    "loss = nn.loss_\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training mse =  [0.0688427782902044, 0.07249018796515878, 0.001980431248953106]\n",
      "testing mse = [0.07293010783691854, 0.07249018796515878, 0.001980431248953106]\n",
      "training R2 = [0.6370898250432422, 0.7821542286076627, 0.9614021953027644]\n",
      "testing R2 = [0.6298586207219397, 0.7801337240384634, 0.9616955197261413]\n"
     ]
    }
   ],
   "source": [
    "y_train_pred = nn.predict(X_train)\n",
    "y_test_pred = nn.predict(X_test)\n",
    "train_score_CN = r2_score(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_score_Cu = r2_score(y_train.iloc[:,1], y_train_pred[:,1]) \n",
    "train_score_Te = r2_score(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_score_CN = r2_score(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_score_Cu = r2_score(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_score_Te = r2_score(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "train_mse_CN = mean_squared_error(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_mse_Cu = mean_squared_error(y_train.iloc[:,1], y_train_pred[:,1])\n",
    "train_mse_Te = mean_squared_error(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_mse_CN = mean_squared_error(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_mse_Cu = mean_squared_error(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_mse_Te = mean_squared_error(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "\n",
    "train_score_list = [train_score_CN, train_score_Cu, train_score_Te]\n",
    "train_mse_list = [train_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_mse_list = [test_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_score_list = [test_score_CN, test_score_Cu, test_score_Te]\n",
    "print('training mse =  '+ str(train_mse_list))\n",
    "print('testing mse = ' + str(test_mse_list))\n",
    "print('training R2 = ' + str(train_score_list))\n",
    "print('testing R2 = ' + str(test_score_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.93479262672811, 5.06520737327189, 3.7927943330453306, 5.150340461506167)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.linspace(8, 12, 50)\n",
    "x2 = np.linspace(4, 8, 50)\n",
    "x3 = np.linspace(4, 5, 50)\n",
    "\n",
    "plt.figure(figsize=[14,4])\n",
    "plt.subplots_adjust(wspace=0.3)\n",
    "ax1 = plt.subplot(1,3,1)\n",
    "ax1.scatter(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "ax1.plot(x1, x1, color='red')\n",
    "ax1.set_xlabel('True CN')\n",
    "ax1.set_ylabel('Pred CN')\n",
    "ax1.set_title('Test CN')\n",
    "plt.axis('equal')\n",
    "\n",
    "ax2 = plt.subplot(1,3,2)\n",
    "ax2.scatter(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "ax2.plot(x2, x2, color='red')\n",
    "ax2.set_xlabel('True Cu Num')\n",
    "ax2.set_ylabel('Pred Cu Num')\n",
    "ax2.set_title('Test Cu Num')\n",
    "plt.axis('equal')\n",
    "\n",
    "\n",
    "ax3 = plt.subplot(1,3,3)\n",
    "ax3.scatter(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "ax3.plot(x3, x3, color='red')\n",
    "ax3.set_xlabel('True Te Num')\n",
    "ax3.set_ylabel('Pred Te Num')\n",
    "ax3.set_title('Test Te Num')\n",
    "plt.axis('equal')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            0\n",
      "0    0.031590\n",
      "1    0.022932\n",
      "2    0.024985\n",
      "3    0.024203\n",
      "4    0.024934\n",
      "5    0.024860\n",
      "6    0.024526\n",
      "7    0.023963\n",
      "8    0.023952\n",
      "9    0.024300\n",
      "10   0.023793\n",
      "11   0.024224\n",
      "12   0.024887\n",
      "13   0.024568\n",
      "14   0.024151\n",
      "15   0.024288\n",
      "16   0.023778\n",
      "17   0.024603\n",
      "18   0.024292\n",
      "19   0.024484\n",
      "20   0.024022\n",
      "21   0.024049\n",
      "22   0.024191\n",
      "23   0.024104\n",
      "24   0.024291\n",
      "25   0.024479\n",
      "26   0.023850\n",
      "27   0.024164\n",
      "28   0.024322\n",
      "29   0.024926\n",
      "30   0.024671\n",
      "31   0.024470\n",
      "32   0.025097\n",
      "33   0.024203\n",
      "34   0.023814\n",
      "35   0.024311\n",
      "36   0.025016\n",
      "37   0.024298\n",
      "38   0.024403\n",
      "39   0.024282\n",
      "40   0.023714\n",
      "41   0.023837\n",
      "42   0.024269\n",
      "43   0.024833\n",
      "44   0.024561\n",
      "45   0.023866\n",
      "46   0.024624\n",
      "47   0.024366\n",
      "48   0.024234\n",
      "49   0.024129\n",
      "50   0.024380\n",
      "51   0.024361\n",
      "52   0.023781\n",
      "53   0.023724\n",
      "54   0.024572\n",
      "55   0.024716\n",
      "56   0.023985\n",
      "57   0.023862\n",
      "58   0.023780\n",
      "59   0.024484\n",
      "60   0.024581\n",
      "61   0.023996\n",
      "62   0.023639\n",
      "63   0.023979\n",
      "64   0.024104\n",
      "65   0.024170\n",
      "66   0.024081\n",
      "67   0.024764\n",
      "68   0.025362\n",
      "69   0.024513\n",
      "70   0.023998\n",
      "71   0.024568\n",
      "72   0.023829\n",
      "73   0.023722\n",
      "74   0.024227\n",
      "75   0.023578\n",
      "76   0.024963\n",
      "77   0.025299\n",
      "78   0.024583\n",
      "79   0.023619\n",
      "80   0.024473\n",
      "81   0.023882\n",
      "82   0.024069\n",
      "83   0.024351\n",
      "84   0.023750\n",
      "85   0.025778\n",
      "86   0.023912\n",
      "87   0.024240\n",
      "88   0.023677\n",
      "89   0.024205\n",
      "90   0.024448\n",
      "91   0.025037\n",
      "92   0.024363\n",
      "93   0.024260\n",
      "94   0.023647\n",
      "95   0.024620\n",
      "96   0.024640\n",
      "97   0.025032\n",
      "98   0.024191\n",
      "99   0.024708\n",
      "100  0.024224\n",
      "101  0.023840\n",
      "102  0.025293\n",
      "103  0.024235\n",
      "104  0.024074\n",
      "105  0.023789\n",
      "106  0.023591\n",
      "107  0.024020\n",
      "108  0.023402\n",
      "109  0.024152\n",
      "110  0.024359\n",
      "111  0.025180\n",
      "112  0.023977\n",
      "113  0.023486\n",
      "114  0.024244\n",
      "115  0.024289\n",
      "116  0.023639\n",
      "117  0.024815\n",
      "118  0.024389\n",
      "119  0.023801\n",
      "120  0.024053\n",
      "121  0.024744\n",
      "122  0.024317\n",
      "123  0.024260\n",
      "124  0.024256\n",
      "125  0.023808\n",
      "126  0.024241\n",
      "127  0.023864\n",
      "128  0.024553\n",
      "129  0.023462\n",
      "130  0.024628\n",
      "131  0.024245\n",
      "132  0.023909\n",
      "133  0.024203\n",
      "134  0.024638\n",
      "135  0.024845\n",
      "136  0.023965\n",
      "137  0.024842\n",
      "138  0.023826\n",
      "139  0.024639\n",
      "140  0.024538\n",
      "141  0.024166\n",
      "142  0.024477\n",
      "143  0.024972\n",
      "144  0.023999\n",
      "145  0.023626\n",
      "146  0.024201\n",
      "147  0.024617\n",
      "148  0.024611\n",
      "149  0.024181\n",
      "150  0.023751\n",
      "151  0.023692\n",
      "152  0.024121\n",
      "153  0.024328\n",
      "154  0.024389\n",
      "155  0.024008\n",
      "156  0.025117\n",
      "157  0.024380\n",
      "158  0.024625\n",
      "159  0.024250\n",
      "160  0.024560\n",
      "161  0.023817\n",
      "162  0.024519\n",
      "163  0.023688\n",
      "164  0.024503\n",
      "165  0.024025\n",
      "166  0.023969\n",
      "167  0.024398\n",
      "168  0.023923\n",
      "169  0.024024\n",
      "170  0.024098\n",
      "171  0.024673\n",
      "172  0.024278\n",
      "173  0.024776\n",
      "174  0.024172\n",
      "175  0.024171\n",
      "176  0.024125\n",
      "177  0.023837\n",
      "178  0.024012\n",
      "179  0.024975\n",
      "180  0.023530\n",
      "181  0.024586\n",
      "182  0.023423\n",
      "183  0.024420\n",
      "184  0.024433\n",
      "185  0.024072\n",
      "186  0.023536\n",
      "187  0.025197\n",
      "188  0.023926\n",
      "189  0.024891\n",
      "190  0.024301\n",
      "191  0.024687\n",
      "192  0.023531\n",
      "193  0.024049\n",
      "194  0.024423\n",
      "195  0.025048\n",
      "196  0.024442\n",
      "197  0.023726\n",
      "198  0.024343\n"
     ]
    }
   ],
   "source": [
    "loss = []\n",
    "for i in range(200):\n",
    "    if i == 0:\n",
    "        pass\n",
    "    else:\n",
    "        nn = MLPRegressor(hidden_layer_sizes=(min_loss10, i), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "        nn = nn.fit(X_train, y_train)\n",
    "        loss.append(nn.loss_)\n",
    "\n",
    "lossdf11 = pd.DataFrame(loss)\n",
    "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "    print(lossdf11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "0.0229318608897171\n"
     ]
    }
   ],
   "source": [
    "min_loss11 = lossdf11.idxmin()[0]+1\n",
    "print(min_loss11)\n",
    "nn = MLPRegressor(hidden_layer_sizes=(min_loss10, min_loss11), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "nn = nn.fit(X_train, y_train)\n",
    "loss = nn.loss_\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training mse =  [0.06313264357601826, 0.06762208485254252, 0.002921253833931651]\n",
      "testing mse = [0.06694570637054977, 0.06762208485254252, 0.002921253833931651]\n",
      "training R2 = [0.6671912538295178, 0.7967837351319806, 0.9430659433329238]\n",
      "testing R2 = [0.6602311880828517, 0.794648497436203, 0.9435726582111694]\n"
     ]
    }
   ],
   "source": [
    "y_train_pred = nn.predict(X_train)\n",
    "y_test_pred = nn.predict(X_test)\n",
    "train_score_CN = r2_score(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_score_Cu = r2_score(y_train.iloc[:,1], y_train_pred[:,1]) \n",
    "train_score_Te = r2_score(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_score_CN = r2_score(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_score_Cu = r2_score(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_score_Te = r2_score(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "train_mse_CN = mean_squared_error(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_mse_Cu = mean_squared_error(y_train.iloc[:,1], y_train_pred[:,1])\n",
    "train_mse_Te = mean_squared_error(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_mse_CN = mean_squared_error(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_mse_Cu = mean_squared_error(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_mse_Te = mean_squared_error(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "\n",
    "train_score_list = [train_score_CN, train_score_Cu, train_score_Te]\n",
    "train_mse_list = [train_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_mse_list = [test_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_score_list = [test_score_CN, test_score_Cu, test_score_Te]\n",
    "print('training mse =  '+ str(train_mse_list))\n",
    "print('testing mse = ' + str(test_mse_list))\n",
    "print('training R2 = ' + str(train_score_list))\n",
    "print('testing R2 = ' + str(test_score_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.93479262672811, 5.06520737327189, 3.911874008027585, 5.0518155234272575)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.linspace(8, 12, 50)\n",
    "x2 = np.linspace(4, 8, 50)\n",
    "x3 = np.linspace(4, 5, 50)\n",
    "\n",
    "plt.figure(figsize=[14,4])\n",
    "plt.subplots_adjust(wspace=0.3)\n",
    "ax1 = plt.subplot(1,3,1)\n",
    "ax1.scatter(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "ax1.plot(x1, x1, color='red')\n",
    "ax1.set_xlabel('True CN')\n",
    "ax1.set_ylabel('Pred CN')\n",
    "ax1.set_title('Test CN')\n",
    "plt.axis('equal')\n",
    "\n",
    "ax2 = plt.subplot(1,3,2)\n",
    "ax2.scatter(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "ax2.plot(x2, x2, color='red')\n",
    "ax2.set_xlabel('True Cu Num')\n",
    "ax2.set_ylabel('Pred Cu Num')\n",
    "ax2.set_title('Test Cu Num')\n",
    "plt.axis('equal')\n",
    "\n",
    "\n",
    "ax3 = plt.subplot(1,3,3)\n",
    "ax3.scatter(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "ax3.plot(x3, x3, color='red')\n",
    "ax3.set_xlabel('True Te Num')\n",
    "ax3.set_ylabel('Pred Te Num')\n",
    "ax3.set_title('Test Te Num')\n",
    "plt.axis('equal')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            0\n",
      "0    0.061628\n",
      "1    0.023489\n",
      "2    0.023518\n",
      "3    0.025161\n",
      "4    0.024842\n",
      "5    0.025305\n",
      "6    0.024301\n",
      "7    0.025057\n",
      "8    0.024953\n",
      "9    0.024156\n",
      "10   0.024326\n",
      "11   0.023657\n",
      "12   0.023984\n",
      "13   0.024651\n",
      "14   0.025091\n",
      "15   0.024589\n",
      "16   0.024850\n",
      "17   0.024095\n",
      "18   0.024354\n",
      "19   0.024928\n",
      "20   0.025042\n",
      "21   0.024429\n",
      "22   0.024479\n",
      "23   0.024542\n",
      "24   0.025815\n",
      "25   0.024570\n",
      "26   0.024692\n",
      "27   0.023925\n",
      "28   0.024528\n",
      "29   0.024594\n",
      "30   0.024565\n",
      "31   0.024445\n",
      "32   0.024388\n",
      "33   0.025518\n",
      "34   0.024178\n",
      "35   0.023725\n",
      "36   0.024283\n",
      "37   0.024569\n",
      "38   0.024278\n",
      "39   0.024587\n",
      "40   0.024961\n",
      "41   0.025455\n",
      "42   0.024238\n",
      "43   0.024296\n",
      "44   0.024768\n",
      "45   0.025517\n",
      "46   0.024610\n",
      "47   0.024618\n",
      "48   0.024325\n",
      "49   0.024152\n",
      "50   0.024209\n",
      "51   0.024505\n",
      "52   0.024654\n",
      "53   0.023925\n",
      "54   0.024485\n",
      "55   0.024214\n",
      "56   0.024550\n",
      "57   0.024150\n",
      "58   0.023965\n",
      "59   0.024019\n",
      "60   0.024355\n",
      "61   0.024984\n",
      "62   0.024284\n",
      "63   0.024599\n",
      "64   0.024200\n",
      "65   0.024486\n",
      "66   0.024927\n",
      "67   0.024782\n",
      "68   0.023835\n",
      "69   0.024623\n",
      "70   0.024229\n",
      "71   0.024338\n",
      "72   0.023836\n",
      "73   0.025110\n",
      "74   0.025422\n",
      "75   0.024468\n",
      "76   0.024042\n",
      "77   0.024765\n",
      "78   0.024769\n",
      "79   0.024443\n",
      "80   0.024284\n",
      "81   0.024994\n",
      "82   0.024968\n",
      "83   0.024327\n",
      "84   0.024047\n",
      "85   0.024773\n",
      "86   0.023568\n",
      "87   0.024350\n",
      "88   0.024374\n",
      "89   0.024972\n",
      "90   0.024556\n",
      "91   0.024346\n",
      "92   0.024031\n",
      "93   0.023568\n",
      "94   0.024414\n",
      "95   0.024832\n",
      "96   0.024813\n",
      "97   0.024003\n",
      "98   0.025203\n",
      "99   0.024197\n",
      "100  0.024558\n",
      "101  0.023857\n",
      "102  0.024425\n",
      "103  0.024311\n",
      "104  0.024222\n",
      "105  0.024956\n",
      "106  0.023916\n",
      "107  0.023792\n",
      "108  0.024357\n",
      "109  0.024148\n",
      "110  0.024800\n",
      "111  0.025293\n",
      "112  0.023966\n",
      "113  0.024376\n",
      "114  0.023859\n",
      "115  0.024001\n",
      "116  0.023539\n",
      "117  0.024205\n",
      "118  0.025320\n",
      "119  0.024852\n",
      "120  0.023964\n",
      "121  0.024456\n",
      "122  0.023891\n",
      "123  0.024066\n",
      "124  0.024251\n",
      "125  0.024386\n",
      "126  0.024299\n",
      "127  0.024199\n",
      "128  0.024069\n",
      "129  0.024169\n",
      "130  0.024193\n",
      "131  0.024769\n",
      "132  0.024294\n",
      "133  0.024294\n",
      "134  0.024114\n",
      "135  0.024773\n",
      "136  0.024354\n",
      "137  0.023651\n",
      "138  0.024387\n",
      "139  0.024151\n",
      "140  0.024125\n",
      "141  0.024886\n",
      "142  0.024855\n",
      "143  0.024809\n",
      "144  0.025433\n",
      "145  0.024482\n",
      "146  0.024995\n",
      "147  0.023780\n",
      "148  0.024382\n",
      "149  0.024660\n",
      "150  0.025015\n",
      "151  0.024260\n",
      "152  0.024052\n",
      "153  0.024610\n",
      "154  0.025234\n",
      "155  0.024723\n",
      "156  0.024316\n",
      "157  0.024033\n",
      "158  0.024156\n",
      "159  0.024693\n",
      "160  0.024305\n",
      "161  0.024137\n",
      "162  0.024957\n",
      "163  0.024216\n",
      "164  0.023425\n",
      "165  0.024260\n",
      "166  0.024196\n",
      "167  0.024295\n",
      "168  0.025154\n",
      "169  0.024433\n",
      "170  0.023942\n",
      "171  0.025044\n",
      "172  0.024880\n",
      "173  0.024258\n",
      "174  0.024180\n",
      "175  0.025212\n",
      "176  0.024154\n",
      "177  0.024222\n",
      "178  0.024640\n",
      "179  0.024179\n",
      "180  0.024160\n",
      "181  0.024591\n",
      "182  0.025059\n",
      "183  0.025139\n",
      "184  0.024785\n",
      "185  0.024772\n",
      "186  0.024037\n",
      "187  0.024650\n",
      "188  0.023995\n",
      "189  0.024453\n",
      "190  0.024565\n",
      "191  0.024897\n",
      "192  0.024516\n",
      "193  0.023763\n",
      "194  0.024683\n",
      "195  0.023959\n",
      "196  0.024758\n",
      "197  0.024337\n",
      "198  0.024380\n"
     ]
    }
   ],
   "source": [
    "loss = []\n",
    "for i in range(200):\n",
    "    if i == 0:\n",
    "        pass\n",
    "    else:\n",
    "        nn = MLPRegressor(hidden_layer_sizes=(min_loss10, min_loss11, i), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "        nn = nn.fit(X_train, y_train)\n",
    "        loss.append(nn.loss_)\n",
    "\n",
    "lossdf12 = pd.DataFrame(loss)\n",
    "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "    print(lossdf12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "165\n",
      "0.023424824675224065\n"
     ]
    }
   ],
   "source": [
    "min_loss12 = lossdf12.idxmin()[0]+1\n",
    "print(min_loss12)\n",
    "nn = MLPRegressor(hidden_layer_sizes=(min_loss10, min_loss11, min_loss12), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "nn = nn.fit(X_train, y_train)\n",
    "loss = nn.loss_\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training mse =  [0.06550340118092174, 0.06883986705616549, 0.002008481125953669]\n",
      "testing mse = [0.06980015291268232, 0.06883986705616549, 0.002008481125953669]\n",
      "training R2 = [0.6546936167709332, 0.7931240853092542, 0.9608555145357236]\n",
      "testing R2 = [0.6457440467427755, 0.7900527515693844, 0.9615638606134178]\n"
     ]
    }
   ],
   "source": [
    "y_train_pred = nn.predict(X_train)\n",
    "y_test_pred = nn.predict(X_test)\n",
    "train_score_CN = r2_score(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_score_Cu = r2_score(y_train.iloc[:,1], y_train_pred[:,1]) \n",
    "train_score_Te = r2_score(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_score_CN = r2_score(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_score_Cu = r2_score(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_score_Te = r2_score(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "train_mse_CN = mean_squared_error(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_mse_Cu = mean_squared_error(y_train.iloc[:,1], y_train_pred[:,1])\n",
    "train_mse_Te = mean_squared_error(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_mse_CN = mean_squared_error(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_mse_Cu = mean_squared_error(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_mse_Te = mean_squared_error(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "\n",
    "train_score_list = [train_score_CN, train_score_Cu, train_score_Te]\n",
    "train_mse_list = [train_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_mse_list = [test_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_score_list = [test_score_CN, test_score_Cu, test_score_Te]\n",
    "print('training mse =  '+ str(train_mse_list))\n",
    "print('testing mse = ' + str(test_mse_list))\n",
    "print('training R2 = ' + str(train_score_list))\n",
    "print('testing R2 = ' + str(test_score_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.93479262672811, 5.06520737327189, 3.809104889505082, 5.164126417854941)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.linspace(8, 12, 50)\n",
    "x2 = np.linspace(4, 8, 50)\n",
    "x3 = np.linspace(4, 5, 50)\n",
    "\n",
    "plt.figure(figsize=[14,4])\n",
    "plt.subplots_adjust(wspace=0.3)\n",
    "ax1 = plt.subplot(1,3,1)\n",
    "ax1.scatter(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "ax1.plot(x1, x1, color='red')\n",
    "ax1.set_xlabel('True CN')\n",
    "ax1.set_ylabel('Pred CN')\n",
    "ax1.set_title('Test CN')\n",
    "plt.axis('equal')\n",
    "\n",
    "ax2 = plt.subplot(1,3,2)\n",
    "ax2.scatter(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "ax2.plot(x2, x2, color='red')\n",
    "ax2.set_xlabel('True Cu Num')\n",
    "ax2.set_ylabel('Pred Cu Num')\n",
    "ax2.set_title('Test Cu Num')\n",
    "plt.axis('equal')\n",
    "\n",
    "\n",
    "ax3 = plt.subplot(1,3,3)\n",
    "ax3.scatter(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "ax3.plot(x3, x3, color='red')\n",
    "ax3.set_xlabel('True Te Num')\n",
    "ax3.set_ylabel('Pred Te Num')\n",
    "ax3.set_title('Test Te Num')\n",
    "plt.axis('equal')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            0\n",
      "0    0.063564\n",
      "1    0.023592\n",
      "2    0.023862\n",
      "3    0.024534\n",
      "4    0.025204\n",
      "5    0.023800\n",
      "6    0.023844\n",
      "7    0.024886\n",
      "8    0.024573\n",
      "9    0.023589\n",
      "10   0.023525\n",
      "11   0.024173\n",
      "12   0.024721\n",
      "13   0.023544\n",
      "14   0.024459\n",
      "15   0.025717\n",
      "16   0.024135\n",
      "17   0.024927\n",
      "18   0.024469\n",
      "19   0.025165\n",
      "20   0.024054\n",
      "21   0.023676\n",
      "22   0.024819\n",
      "23   0.024948\n",
      "24   0.024240\n",
      "25   0.024367\n",
      "26   0.023802\n",
      "27   0.023987\n",
      "28   0.023995\n",
      "29   0.024845\n",
      "30   0.023865\n",
      "31   0.024266\n",
      "32   0.023768\n",
      "33   0.025082\n",
      "34   0.024260\n",
      "35   0.023856\n",
      "36   0.024171\n",
      "37   0.024698\n",
      "38   0.023594\n",
      "39   0.023883\n",
      "40   0.024301\n",
      "41   0.024423\n",
      "42   0.024330\n",
      "43   0.024302\n",
      "44   0.025325\n",
      "45   0.025079\n",
      "46   0.024231\n",
      "47   0.023526\n",
      "48   0.024007\n",
      "49   0.024062\n",
      "50   0.024372\n",
      "51   0.023885\n",
      "52   0.023833\n",
      "53   0.024782\n",
      "54   0.023528\n",
      "55   0.023742\n",
      "56   0.024369\n",
      "57   0.023832\n",
      "58   0.024530\n",
      "59   0.023855\n",
      "60   0.025405\n",
      "61   0.024899\n",
      "62   0.024041\n",
      "63   0.025518\n",
      "64   0.025059\n",
      "65   0.024893\n",
      "66   0.023826\n",
      "67   0.024133\n",
      "68   0.024010\n",
      "69   0.024542\n",
      "70   0.024298\n",
      "71   0.023772\n",
      "72   0.024423\n",
      "73   0.024355\n",
      "74   0.024729\n",
      "75   0.025260\n",
      "76   0.024261\n",
      "77   0.023522\n",
      "78   0.024305\n",
      "79   0.023832\n",
      "80   0.023629\n",
      "81   0.024882\n",
      "82   0.024263\n",
      "83   0.024375\n",
      "84   0.025126\n",
      "85   0.024020\n",
      "86   0.025071\n",
      "87   0.024106\n",
      "88   0.024784\n",
      "89   0.024369\n",
      "90   0.024327\n",
      "91   0.024193\n",
      "92   0.023589\n",
      "93   0.024255\n",
      "94   0.024324\n",
      "95   0.023775\n",
      "96   0.023637\n",
      "97   0.024688\n",
      "98   0.023539\n",
      "99   0.024089\n",
      "100  0.024075\n",
      "101  0.024454\n",
      "102  0.024682\n",
      "103  0.024312\n",
      "104  0.024141\n",
      "105  0.024511\n",
      "106  0.025581\n",
      "107  0.024004\n",
      "108  0.023610\n",
      "109  0.023288\n",
      "110  0.024368\n",
      "111  0.023464\n",
      "112  0.024726\n",
      "113  0.024153\n",
      "114  0.024513\n",
      "115  0.024126\n",
      "116  0.023514\n",
      "117  0.023357\n",
      "118  0.024689\n",
      "119  0.024789\n",
      "120  0.024078\n",
      "121  0.024778\n",
      "122  0.024076\n",
      "123  0.023834\n",
      "124  0.025043\n",
      "125  0.023562\n",
      "126  0.023693\n",
      "127  0.024205\n",
      "128  0.024011\n",
      "129  0.024616\n",
      "130  0.024030\n",
      "131  0.024574\n",
      "132  0.024291\n",
      "133  0.024757\n",
      "134  0.024245\n",
      "135  0.023839\n",
      "136  0.025094\n",
      "137  0.024224\n",
      "138  0.023359\n",
      "139  0.023534\n",
      "140  0.024592\n",
      "141  0.023789\n",
      "142  0.023329\n",
      "143  0.024428\n",
      "144  0.023632\n",
      "145  0.024557\n",
      "146  0.023878\n",
      "147  0.024500\n",
      "148  0.024134\n",
      "149  0.025211\n",
      "150  0.024390\n",
      "151  0.023326\n",
      "152  0.023319\n",
      "153  0.024926\n",
      "154  0.023977\n",
      "155  0.023178\n",
      "156  0.024054\n",
      "157  0.024816\n",
      "158  0.024293\n",
      "159  0.024482\n",
      "160  0.023841\n",
      "161  0.025993\n",
      "162  0.023618\n",
      "163  0.023904\n",
      "164  0.024556\n",
      "165  0.023236\n",
      "166  0.023755\n",
      "167  0.023901\n",
      "168  0.023796\n",
      "169  0.023812\n",
      "170  0.024411\n",
      "171  0.024158\n",
      "172  0.024695\n",
      "173  0.023886\n",
      "174  0.023586\n",
      "175  0.025633\n",
      "176  0.023948\n",
      "177  0.024669\n",
      "178  0.023887\n",
      "179  0.024297\n",
      "180  0.024030\n",
      "181  0.023799\n",
      "182  0.023704\n",
      "183  0.026061\n",
      "184  0.024592\n",
      "185  0.023333\n",
      "186  0.024434\n",
      "187  0.024212\n",
      "188  0.023419\n",
      "189  0.024652\n",
      "190  0.024120\n",
      "191  0.024416\n",
      "192  0.023818\n",
      "193  0.024262\n",
      "194  0.024886\n",
      "195  0.023600\n",
      "196  0.024729\n",
      "197  0.024072\n",
      "198  0.023450\n"
     ]
    }
   ],
   "source": [
    "loss = []\n",
    "for i in range(200):\n",
    "    if i == 0:\n",
    "        pass\n",
    "    else:\n",
    "        nn = MLPRegressor(hidden_layer_sizes=(min_loss10, min_loss11, min_loss12, i), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "        nn = nn.fit(X_train, y_train)\n",
    "        loss.append(nn.loss_)\n",
    "\n",
    "lossdf13 = pd.DataFrame(loss)\n",
    "with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also\n",
    "    print(lossdf13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "156\n",
      "0.023424824675224065\n"
     ]
    }
   ],
   "source": [
    "min_loss13 = lossdf13.idxmin()[0]+1\n",
    "print(min_loss13)\n",
    "nn = MLPRegressor(hidden_layer_sizes=(min_loss10, min_loss11, min_loss12), activation='identity', solver='adam', max_iter=500, random_state=28)\n",
    "nn = nn.fit(X_train, y_train)\n",
    "loss = nn.loss_\n",
    "print(loss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training mse =  [0.06550340118092174, 0.06883986705616549, 0.002008481125953669]\n",
      "testing mse = [0.06980015291268232, 0.06883986705616549, 0.002008481125953669]\n",
      "training R2 = [0.6546936167709332, 0.7931240853092542, 0.9608555145357236]\n",
      "testing R2 = [0.6457440467427755, 0.7900527515693844, 0.9615638606134178]\n"
     ]
    }
   ],
   "source": [
    "y_train_pred = nn.predict(X_train)\n",
    "y_test_pred = nn.predict(X_test)\n",
    "train_score_CN = r2_score(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_score_Cu = r2_score(y_train.iloc[:,1], y_train_pred[:,1]) \n",
    "train_score_Te = r2_score(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_score_CN = r2_score(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_score_Cu = r2_score(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_score_Te = r2_score(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "train_mse_CN = mean_squared_error(y_train.iloc[:,0], y_train_pred[:,0])\n",
    "train_mse_Cu = mean_squared_error(y_train.iloc[:,1], y_train_pred[:,1])\n",
    "train_mse_Te = mean_squared_error(y_train.iloc[:,2], y_train_pred[:,2])\n",
    "test_mse_CN = mean_squared_error(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "test_mse_Cu = mean_squared_error(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "test_mse_Te = mean_squared_error(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "\n",
    "train_score_list = [train_score_CN, train_score_Cu, train_score_Te]\n",
    "train_mse_list = [train_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_mse_list = [test_mse_CN, train_mse_Cu, train_mse_Te]\n",
    "test_score_list = [test_score_CN, test_score_Cu, test_score_Te]\n",
    "print('training mse =  '+ str(train_mse_list))\n",
    "print('testing mse = ' + str(test_mse_list))\n",
    "print('training R2 = ' + str(train_score_list))\n",
    "print('testing R2 = ' + str(test_score_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3.93479262672811, 5.06520737327189, 3.809104889505082, 5.164126417854941)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x1 = np.linspace(8, 12, 50)\n",
    "x2 = np.linspace(4, 8, 50)\n",
    "x3 = np.linspace(4, 5, 50)\n",
    "\n",
    "plt.figure(figsize=[14,4])\n",
    "plt.subplots_adjust(wspace=0.3)\n",
    "ax1 = plt.subplot(1,3,1)\n",
    "ax1.scatter(y_test.iloc[:,0], y_test_pred[:,0])\n",
    "ax1.plot(x1, x1, color='red')\n",
    "ax1.set_xlabel('True CN')\n",
    "ax1.set_ylabel('Pred CN')\n",
    "ax1.set_title('Test CN')\n",
    "plt.axis('equal')\n",
    "\n",
    "ax2 = plt.subplot(1,3,2)\n",
    "ax2.scatter(y_test.iloc[:,1], y_test_pred[:,1])\n",
    "ax2.plot(x2, x2, color='red')\n",
    "ax2.set_xlabel('True Cu Num')\n",
    "ax2.set_ylabel('Pred Cu Num')\n",
    "ax2.set_title('Test Cu Num')\n",
    "plt.axis('equal')\n",
    "\n",
    "\n",
    "ax3 = plt.subplot(1,3,3)\n",
    "ax3.scatter(y_test.iloc[:,2], y_test_pred[:,2])\n",
    "ax3.plot(x3, x3, color='red')\n",
    "ax3.set_xlabel('True Te Num')\n",
    "ax3.set_ylabel('Pred Te Num')\n",
    "ax3.set_title('Test Te Num')\n",
    "plt.axis('equal')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
